# ----------------------------------------
# SERVER CONFIGURATION
# ----------------------------------------
# Port on which the application will run (defaults to 8080)
server.port=${SERVER_PORT:8080}
# Base context path for all endpoints (defaults to /api)
server.context-path=${SERVER_CONTEXT_PATH:/api}

# ----------------------------------------
# DATABASE CONFIGURATION
# ----------------------------------------
# JDBC URL of the database (defined in environment variable)
spring.datasource.url=${SPRING_DATASOURCE_URL}
# Database username (defined in environment variable)
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
# Database password (defined in environment variable)
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
# JDBC driver for PostgreSQL database
spring.datasource.driver-class-name=org.postgresql.Driver

# ----------------------------------------
# JPA CONFIGURATION
# ----------------------------------------
# Database schema generation strategy (create, create-drop, validate, update, none)
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
# Enable Liquibase for controlled schema changes
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml
# Control execution order - Liquibase runs after Hibernate
spring.jpa.properties.hibernate.hbm2ddl.schema_filter_provider=org.hibernate.tool.schema.internal.DefaultSchemaFilterProvider
spring.liquibase.contexts=update
# Enable logging of SQL statements to console
spring.jpa.show-sql=true
# Format SQL statements in logs for better readability
spring.jpa.properties.hibernate.format_sql=true
# Specify the dialect for PostgreSQL database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ----------------------------------------
# LOGGING CONFIGURATION
# ----------------------------------------
# Set logging level for Spring Security framework
logging.level.org.springframework.security=INFO
# Set logging level for OAuth2 components
logging.level.org.springframework.oauth2=INFO
# Set logging level for Thymeleaf template engine
logging.level.org.thymeleaf=INFO
# Set logging level for Spring Data components
logging.level.org.springframework.data=INFO

# ----------------------------------------
# JWT CONFIGURATION
# ----------------------------------------
# Configuration for JWT token settings (if applicable)
# jwt.secret=${JWT_SECRET}
# jwt.expiration=${JWT_EXPIRATION}

# ----------------------------------------
# SPRING APPLICATION SETTINGS
# ----------------------------------------
# Allow overriding bean definitions (useful for customizing auto-configured beans)
spring.main.allow-bean-definition-overriding=true

# ----------------------------------------
# API DOCUMENTATION (SWAGGER/OPENAPI)
# ----------------------------------------
# Include actuator endpoints in API documentation
springdoc.show-actuator=true
# Path for OpenAPI specification JSON
springdoc.api-docs.path=/v3/api-docs
# Path for Swagger UI HTML interface
springdoc.swagger-ui.path=/swagger-ui.html

# ----------------------------------------
# ACTUATOR CONFIGURATION
# ----------------------------------------
# List of actuator endpoints to expose
management.endpoints.web.exposure.include=info,health

# ----------------------------------------
# INTERNATIONALIZATION
# ----------------------------------------
# Base name of the resource bundle for messages
spring.messages.basename=messages
# Character encoding for message resources
spring.messages.encoding=UTF-8

# ----------------------------------------
# THYMELEAF TEMPLATE ENGINE
# ----------------------------------------
# Directory containing template files
spring.thymeleaf.prefix=classpath:/templates/
# Template file extension
spring.thymeleaf.suffix=.html
# Disable template caching (useful during development)
spring.thymeleaf.cache=false

# ----------------------------------------
# APPLICATION METADATA
# ----------------------------------------
# Name of the application module
module-name=app
# API version identifier
api-version=1.0

# ----------------------------------------
# REDIS CONFIGURATION
# ----------------------------------------
# Redis server host
spring.data.redis.host=localhost
# Redis server port
spring.data.redis.port=6379
# Redis server password (if set)
#spring.redis.password=your_password_here
# Redis database index (optional, default is 0)
spring.data.redis.database=0
# Connection timeout in milliseconds
spring.data.redis.timeout=60000
# Cache type to use (redis in this case)
spring.cache.type=redis
# Set TTL for cache entries
spring.cache.redis.time-to-live=600000

# ----------------------------------------
# AUTH0 CONFIGURATION
# ----------------------------------------
# Auth0 client ID
spring.security.oauth2.client.registration.auth0.client-id=${AWS_COGNITO_CLIENT_ID}
# Auth0 client secret
spring.security.oauth2.client.registration.auth0.client-secret=${AWS_COGNITO_CLIENT_SECRET}
# Auth0 scopes
spring.security.oauth2.client.registration.auth0.scope=openid,phone,email
# Auth0 redirect URI
spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
# Auth0 provider details
spring.security.oauth2.client.provider.auth0.issuer-uri=https://cognito-idp.${AWS_REGION}.amazonaws.com/${AWS_COGNITO_USER_POOL_ID}
spring.security.oauth2.client.provider.auth0.user-name-attribute=username

# ----------------------------------------
# PROBLEM DETAILS CONFIGURATION
# ----------------------------------------
# Enable ProblemDetails for error handling
spring.mvc.problemdetails.enabled=true

# ----------------------------------------
# AWS COGNITO CONFIGURATION
# ----------------------------------------
# AWS region
aws.region=${AWS_REGION}
# AWS Cognito user pool ID
aws.cognito.userPoolId=${AWS_COGNITO_USER_POOL_ID}
# AWS Cognito client ID
aws.cognito.clientId=${AWS_COGNITO_CLIENT_ID}
# AWS access key (option 1)
aws.accessKey=${AWS_ACCESS_KEY_ID}
# AWS secret key (option 1)
aws.secretKey=${AWS_SECRET_ACCESS_KEY}
